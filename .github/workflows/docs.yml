name: Build and Deploy Documentation

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install poetry==2.1.2

      - name: Install dependencies
        run: poetry install --with dev

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "VERSION_PATH=versions/$VERSION" >> $GITHUB_ENV
            echo "IS_LATEST=true" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
            echo "VERSION_PATH=latest" >> $GITHUB_ENV
            echo "IS_LATEST=true" >> $GITHUB_ENV
          fi

      - name: Build documentation
        run: |
          # Create versions directory structure
          mkdir -p site/versions
          
          # Update switcher.json for pyData theme version switcher
          python update_docs_gh_version.py --version $VERSION --site-dir site --is-latest $IS_LATEST
          
          # Build the documentation
          cd docs
          poetry run make html
          
          # Copy to version-specific directory
          mkdir -p ../site/versions/$VERSION
          cp -r build/html/* ../site/versions/$VERSION/
          
          # If this is the latest version, also copy to the latest directory and root
          if [ "$IS_LATEST" = "true" ]; then
            rm -rf ../site/latest
            mkdir -p ../site/latest
            cp -r build/html/* ../site/latest/
            cp -r build/html/* ../site/
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
