name: Build and Deploy Documentation

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "VERSION_PATH=versions/$VERSION" >> $GITHUB_ENV
            echo "IS_LATEST=true" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
            echo "VERSION_PATH=latest" >> $GITHUB_ENV
            echo "IS_LATEST=true" >> $GITHUB_ENV
          fi

      - name: Build documentation
        run: |
          # Create versions directory structure
          mkdir -p site/versions
          
          # Create versions.json for version switcher
          if [ ! -f site/versions.json ]; then
            echo '{"versions":[]}' > site/versions.json
          fi
          
          # Update versions.json
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Add version to versions.json if it doesn't exist
            if ! grep -q "\"$VERSION\"" site/versions.json; then
              # Get existing versions
              VERSIONS=$(jq -r '.versions' site/versions.json)
              # Add new version and sort
              NEW_VERSIONS=$(echo "$VERSIONS" | jq '. += ["'"$VERSION"'"]' | jq 'sort_by(. | split(".") | map(tonumber)) | reverse')
              # Update versions.json
              jq --argjson versions "$NEW_VERSIONS" '.versions = $versions' site/versions.json > site/versions.json.new
              mv site/versions.json.new site/versions.json
            fi
          fi
          
          # Set RTD_VERSION environment variable for sphinx-rtd-theme
          export RTD_VERSION=$VERSION
          
          # Build the documentation
          cd docs
          poetry run make html
          
          # Copy to version-specific directory
          mkdir -p ../site/versions/$VERSION
          cp -r build/html/* ../site/versions/$VERSION/
          
          # If this is the latest version, also copy to the root
          if [ "$IS_LATEST" = "true" ]; then
            cp -r build/html/* ../site/
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
